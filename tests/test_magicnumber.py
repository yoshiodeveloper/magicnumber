import json
import pathlib


TESTS_PATH = pathlib.Path(__file__).parent.absolute()


def test_magic_number_challenge_case():
    """ Tests the challenge case. """
    from magicnumber import MagicNumber
    tested_method = MagicNumber.count

    # Testing with empty and None entries.
    assert tested_method([]) is None
    assert tested_method(None) is None

    # Test the case from the challenge.
    args = [[8, 27], [49, 49]]
    assert tested_method(args) == 3


def test_magic_number_small_dataset():
    """ Tests the magic numbers calc with a small dataset.

    It loads a dataset with 100 elements with A and B between 0 to 1,000. There
    are 252 magic numbers.

    This dataset was generated by a script but each item was "manually"
    checked.
    """
    from magicnumber import MagicNumber
    tested_method = MagicNumber.count

    with open(f'{TESTS_PATH}/small_dataset.json', 'r') as f:
        content = f.read()

    small_dataset = json.loads(content)
    magic_numbers = small_dataset['magic_numbers']
    dataset = small_dataset['dataset']
    assert tested_method(dataset) == magic_numbers


def test_magic_number_huge_dataset():
    """ Tests the magic numbers calculations with a huge dataset. The main
    purpose is verify the performance.

    It loads a huge dataset with 100,000 elements with A and B between 0 to
    100,000. This dataset was not manually verified because of the size,
    but it was generated by the same script used on "small_dataset.json".
    """
    from magicnumber import MagicNumber
    tested_method = MagicNumber.count

    with open(f'{TESTS_PATH}/huge_dataset.json', 'r') as f:
        content = f.read()

    huge_dataset = json.loads(content)
    magic_numbers = huge_dataset['magic_numbers']
    dataset = huge_dataset['dataset']
    assert tested_method(dataset) == magic_numbers
