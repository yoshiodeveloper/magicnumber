import unittest


class TestMagicNumber(unittest.TestCase):
    """ Unit test for magic numbers" calculations. """

    def test_count_magic_number(self):
        """ Tests "count_magic_number" function. """
        import json
        import pathlib

        from magicnumber import count_magic_numbers

        # Testing with empty and None entries.
        self.assertIsNone(count_magic_numbers([]), None)
        self.assertIsNone(count_magic_numbers(None), None)

        # Test the first case from the challenge.
        args = [[8, 27], [49, 49]]
        self.assertEqual(count_magic_numbers(args), 3)

        # Loads a dataset with 100 elements with A and B between 0 to 1,000.
        # There are 252 magic numbers. This dataset was generated by a script
        # but each item was "manually" checked.
        path = pathlib.Path(__file__).parent.absolute()
        with open(f'{path}/small_dataset.json', 'r') as f:
            content = f.read()

        small_dataset = json.loads(content)
        magic_numbers = small_dataset['magic_numbers']
        dataset = small_dataset['dataset']
        self.assertEqual(count_magic_numbers(dataset), magic_numbers)

        # Loads a huge dataset with 100,000 elements with A and B between 0 to
        # 100,000. This dataset was not manually verified because of the size,
        # but it was generated by the same script used on "small_dataset.json".
        # The main purpose is verify the performance.
        with open(f'{path}/huge_dataset.json', 'r') as f:
            content = f.read()

        huge_dataset = json.loads(content)
        magic_numbers = huge_dataset['magic_numbers']
        dataset = huge_dataset['dataset']
        self.assertEqual(count_magic_numbers(dataset), magic_numbers)


if __name__ == '__main__':
    unittest.main()
